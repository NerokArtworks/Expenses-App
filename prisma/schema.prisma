generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id        String   @id @default(uuid())
    email     String   @unique
    password  String
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    expenses         Expense[]
    incomes          Income[]
    budgets          Budget[]
    categories       Category[]
    tags             Tag[]
    RecurringExpense RecurringExpense[]
}

model Expense {
    id          String    @id @default(uuid())
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    amount      Decimal
    categoryId  String?
    category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    description String?
    date        DateTime  @default(now())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt

    tags      ExpenseTag[]
    recurring RecurringExpense?
}

model Income {
    id          String    @id @default(uuid())
    userId      String
    user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    amount      Decimal
    categoryId  String?
    category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    description String?
    date        DateTime  @default(now())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Category {
    id       String       @id @default(uuid())
    userId   String
    user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    name     String
    type     CategoryType
    expenses Expense[]
    incomes  Income[]
    Budget   Budget[]

    @@unique([userId, name])
}

enum CategoryType {
    EXPENSE
    INCOME
}

model Budget {
    id         String    @id @default(uuid())
    userId     String
    user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    categoryId String?
    category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
    amount     Decimal
    startDate  DateTime
    endDate    DateTime
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
}

model Tag {
    id       String       @id @default(uuid())
    userId   String
    user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    name     String       @unique
    expenses ExpenseTag[]

    @@unique([userId, name])
}

model ExpenseTag {
    expenseId String
    tagId     String
    expense   Expense @relation(fields: [expenseId], references: [id], onDelete: Cascade)
    tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

    @@id([expenseId, tagId])
}

model RecurringExpense {
    id          String             @id @default(uuid())
    userId      String
    user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
    expenseId   String             @unique
    expense     Expense            @relation(fields: [expenseId], references: [id], onDelete: Cascade)
    frequency   RecurringFrequency
    nextPayment DateTime
    createdAt   DateTime           @default(now())
    updatedAt   DateTime           @updatedAt
}

enum RecurringFrequency {
    DAILY
    WEEKLY
    MONTHLY
    YEARLY
}
